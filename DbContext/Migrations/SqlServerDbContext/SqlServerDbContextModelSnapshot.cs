// <auto-generated />
using System;
using DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbContext.Migrations.SqlServerDbContext
{
    [DbContext(typeof(MainDbContext.SqlServerDbContext))]
    partial class SqlServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AttractionCategories", b =>
                {
                    b.Property<Guid>("AttractionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttractionId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AttractionCategories", "supusr");
                });

            modelBuilder.Entity("DbModels.AttractionAddressesDbM", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AddressId");

                    b.HasIndex("StreetAddress", "ZipCode", "CityPlace", "Country")
                        .IsUnique();

                    b.ToTable("AttractionAddressesDb", "supusr");
                });

            modelBuilder.Entity("DbModels.AttractionsDbM", b =>
                {
                    b.Property<Guid>("AttractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttractionDescription")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AttractionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.HasKey("AttractionId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AttractionName", "AttractionDescription", "AddressId")
                        .IsUnique()
                        .HasFilter("[AttractionDescription] IS NOT NULL AND [AddressId] IS NOT NULL");

                    b.ToTable("AttractionsDb", "supusr");
                });

            modelBuilder.Entity("DbModels.CategoriesDbM", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("CategoriesDb", "supusr");
                });

            modelBuilder.Entity("DbModels.ReviewsDbM", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttractionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewScore")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewId");

                    b.HasIndex("UserId");

                    b.HasIndex("AttractionId", "UserId")
                        .IsUnique();

                    b.HasIndex("ReviewScore", "ReviewText");

                    b.ToTable("ReviewsDb", "supusr");
                });

            modelBuilder.Entity("DbModels.UsersDbM", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FirstName", "LastName");

                    b.HasIndex("LastName", "FirstName");

                    b.ToTable("UsersDb", "supusr");
                });

            modelBuilder.Entity("Models.DTO.SupUsrInfoDbDto", b =>
                {
                    b.Property<int>("NrAttractionAddresses")
                        .HasColumnType("int");

                    b.Property<int>("NrAttractions")
                        .HasColumnType("int");

                    b.Property<int>("NrAttractionsWithNoAddress")
                        .HasColumnType("int");

                    b.Property<int>("NrCategories")
                        .HasColumnType("int");

                    b.Property<int>("NrReviews")
                        .HasColumnType("int");

                    b.Property<int>("NrSeededAttractionAddresses")
                        .HasColumnType("int");

                    b.Property<int>("NrSeededAttractions")
                        .HasColumnType("int");

                    b.Property<int>("NrSeededCategories")
                        .HasColumnType("int");

                    b.Property<int>("NrSeededReviews")
                        .HasColumnType("int");

                    b.Property<int>("NrSeededUsers")
                        .HasColumnType("int");

                    b.Property<int>("NrUnseededAttractionAddresses")
                        .HasColumnType("int");

                    b.Property<int>("NrUnseededAttractions")
                        .HasColumnType("int");

                    b.Property<int>("NrUnseededCategories")
                        .HasColumnType("int");

                    b.Property<int>("NrUnseededReviews")
                        .HasColumnType("int");

                    b.Property<int>("NrUnseededUsers")
                        .HasColumnType("int");

                    b.Property<int>("NrUsers")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_SupUsrInfoDb", "supusr");
                });

            modelBuilder.Entity("AttractionCategories", b =>
                {
                    b.HasOne("DbModels.AttractionsDbM", null)
                        .WithMany()
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModels.CategoriesDbM", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbModels.AttractionsDbM", b =>
                {
                    b.HasOne("DbModels.AttractionAddressesDbM", "AttractionAddressesDbM")
                        .WithMany("AttractionsDbM")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AttractionAddressesDbM");
                });

            modelBuilder.Entity("DbModels.ReviewsDbM", b =>
                {
                    b.HasOne("DbModels.AttractionsDbM", "AttractionsDbM")
                        .WithMany("ReviewsDbM")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModels.UsersDbM", "UsersDbM")
                        .WithMany("ReviewsDbM")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttractionsDbM");

                    b.Navigation("UsersDbM");
                });

            modelBuilder.Entity("DbModels.AttractionAddressesDbM", b =>
                {
                    b.Navigation("AttractionsDbM");
                });

            modelBuilder.Entity("DbModels.AttractionsDbM", b =>
                {
                    b.Navigation("ReviewsDbM");
                });

            modelBuilder.Entity("DbModels.UsersDbM", b =>
                {
                    b.Navigation("ReviewsDbM");
                });
#pragma warning restore 612, 618
        }
    }
}
